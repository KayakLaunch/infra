AWSTemplateFormatVersion: 2010-09-09
Description: The API for KayakLaunch.

Parameters:
  stage:
    Type: String
    Default: "development"
    AllowedValues:
      - development
      - testing
      - production
    Description: "The lifecycle stage of resources created buy this stack. All resources will be automatically tagged with this."
  ddbRoutesTableArn:
    Type: String
    Description: "The ARN of the DyanmoDB routes table which the Lambda functions will utilise."
  ddbRoutesTableName:
    Type: String
    Description: "The name of the DyanmoDB routes table which the Lambda functions will utilise."
  ddbRoutesTableIndexName:
    Type: String
    Description: "The name of the index of the DyanmoDB routes table which the Lambda functions will utilise."
  codeBucketName:
    Type: String
    Description: "The name of the S3 bucket containing the code for the Lambda functions."

Resources:
  lambdaDdbRoRole:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName:
        Fn::Join:
          - ''
          - - "role-lambda-ro-"
            - !Ref stage
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
            Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Policies: 
        -
          PolicyName:
            Fn::Join:
              - ''
              - - "policy-lambda-ro-"
                - !Ref stage
          PolicyDocument: 
            Version: "2012-10-17"
            Statement: 
              - 
                Effect: "Allow"
                Action:
                  - "dynamodb:GetItem"
                  - "dynamodb:BatchGetItem"
                  - "dynamodb:Scan"
                  - "dynamodb:Query"
                Resource:
                  - !Ref ddbRoutesTableArn
                  - Fn::Join:
                    - ''
                    - - !Ref ddbRoutesTableArn
                      - '/*'
  apigwRestApi:
    Type: "AWS::ApiGateway::RestApi"
    Properties:
      Name:
        Fn::Join:
          - ''
          - - "apigw-restapi-"
            - !Ref stage
  apigwStage:
    Type: "AWS::ApiGateway::Stage"
    Properties:
      DeploymentId: !Ref apigwDeployment
      RestApiId: !Ref apigwRestApi
      StageName: !Ref stage
  apigwDeployment:
    DependsOn:
      - "apigwListRoutesMethod"
      - "apigwRouteDetailsMethod"
    Type: "AWS::ApiGateway::Deployment"
    Properties:
      RestApiId: !Ref apigwRestApi

########### List Routes API ###########
  apigwRoutesResource:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      ParentId: !GetAtt apigwRestApi.RootResourceId
      RestApiId: !Ref apigwRestApi
      PathPart: "routes"
  apigwListRoutesMethod:
    Type: "AWS::ApiGateway::Method"
    Properties:
      ApiKeyRequired: False
      AuthorizationType: "NONE"
      HttpMethod: "GET"
      ResourceId: !Ref apigwRoutesResource
      Integration:
        Type: "AWS"
        IntegrationHttpMethod: "POST"
        Uri:
          Fn::Join:
            - ''
            - - "arn:aws:apigateway:"
              - !Ref AWS::Region
              - ":lambda:path/2015-03-31/functions/"
              - !GetAtt functionListRoutes.Arn
              - "/invocations"
        ContentHandling: "CONVERT_TO_TEXT"
        PassthroughBehavior: "WHEN_NO_MATCH"
        IntegrationResponses:
          -
            StatusCode: 200
            ResponseTemplates:
              "application/json":
                Fn::Join:
                  - ''
                  - - "#set($inputRoot = $input.path('$')){"
                    - "\"status\": \"success\","
                    - "\"data\": {"
                    - "\"routes\": [#foreach($elem in $inputRoot.Items){"
                    - "\"name\": \"$elem.name.S\","
                    - "\"location\": \"$elem.location.S\","
                    - "\"descriptionShort\": \"$elem.descriptionShort.S\","
                    - "\"routeID\": \"$elem.routeID.S\","
                    - "\"latlon\": {\"start\": \"$elem.latlon.M.start.S\",\"end\": \"$elem.latlon.M.end.S\"}"
                    - "}#if($foreach.hasNext),#end #end]}}"
          -
            StatusCode: 500
            SelectionPattern: ".*error.*"
            ResponseTemplates:
              "application/json": "{\"status\": \"error\", \"message\": \"Internal Server Error\"}"
      RestApiId: !Ref apigwRestApi
      MethodResponses:
        -
          StatusCode: 200
          ResponseModels:
            "application/json": "Empty"
        -
          StatusCode: 500
          ResponseModels:
            "application/json": "Empty"
  functionListRoutes:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        S3Bucket: !Ref codeBucketName
        S3Key: "list-routes.py.zip"
      FunctionName:
        Fn::Join:
          - ''
          - - "function-list-routes-"
            - !Ref stage
      Handler: "list-routes.lambda_handler"
      Role: !GetAtt lambdaDdbRoRole.Arn
      Runtime: "python2.7"
      Environment:
        Variables:
          "TABLE":  !Ref ddbRoutesTableName
          "TABLEINDEX": !Ref ddbRoutesTableIndexName
  functionListRoutesPermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: 'lambda:invokeFunction'
      FunctionName: !Ref functionListRoutes
      Principal:  apigateway.amazonaws.com
      SourceArn: !Sub arn:${AWS::Partition}:execute-api:${AWS::Region}:${AWS::AccountId}:${apigwRestApi}/*
  
########### Get Route Details API ###########
  apigwRouteIDResource:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      ParentId: !Ref apigwRoutesResource
      RestApiId: !Ref apigwRestApi
      PathPart: "{routeID}"
  apigwRouteDetailsMethod:
    Type: "AWS::ApiGateway::Method"
    Properties:
      ApiKeyRequired: False
      AuthorizationType: "NONE"
      HttpMethod: "GET"
      ResourceId: !Ref apigwRouteIDResource
      Integration:
        Type: "AWS"
        IntegrationHttpMethod: "POST"
        Uri:
          Fn::Join:
            - ''
            - - "arn:aws:apigateway:"
              - !Ref AWS::Region
              - ":lambda:path/2015-03-31/functions/"
              - !GetAtt functionRouteDetailsGet.Arn
              - "/invocations"
        ContentHandling: "CONVERT_TO_TEXT"
        PassthroughBehavior: "WHEN_NO_MATCH"
        RequestTemplates:
          "application/json": "{\"params\": {#foreach($param in $input.params().path.keySet()) \"$param\": \"$util.escapeJavaScript($input.params().path.get($param))\" #if($foreach.hasNext), #end #end}}"
        IntegrationResponses:
          -
            StatusCode: 200
            ResponseTemplates:
              "application/json":
                Fn::Join:
                  - ''
                  - - "#set($inputRoot = $input.path('$')){"
                    - "\"status\": \"success\","
                    - "\"data\": {"
                    - "\"routeID\": \"$inputRoot.Item.routeID.S\","
                    - "\"name\": \"$inputRoot.Item.name.S\","
                    - "\"location\": \"$inputRoot.Item.location.S\","
                    - "\"descriptionShort\": \"$inputRoot.Item.descriptionShort.S\","
                    - "\"urlMap\": \"$inputRoot.Item.urlMap.S\","
                    - "\"urlHeadlineImg\": \"$inputRoot.Item.urlHeadlineImg.S\","
                    - "\"urlWeather\": \"$inputRoot.Item.urlWeather.S\","
                    - "\"type\": \"$inputRoot.Item.type.S\","
                    - "\"distance\": \"$inputRoot.Item.distance.N\","
                    - "\"latlon\": {\"start\": \"$inputRoot.Item.latlon.M.start.S\",\"end\": \"$inputRoot.Item.latlon.M.end.S\"},"
                    - "\"paddlingTimes\": {\"kayak\": \"$inputRoot.Item.paddlingTimes.M.kayak.S\","
                    - "\"canoe\": \"$inputRoot.Item.paddlingTimes.M.canoe.S\","
                    - "\"sup\": \"$inputRoot.Item.paddlingTimes.M.sup.S\"},"
                    - "\"hazards\": {\"environment\": [#foreach($elem in $inputRoot.Item.hazards.M.environment.SS)\"$elem\"#if($foreach.hasNext),#end #end],"
                    - "\"wildlife\": [#foreach($elem in $inputRoot.Item.hazards.M.wildlife.SS)\"$elem\"#if($foreach.hasNext),#end #end],"
                    - "\"weather\": [#foreach($elem in $inputRoot.Item.hazards.M.weather.SS)\"$elem\"#if($foreach.hasNext),#end #end],"
                    - "\"traffic\": [#foreach($elem in $inputRoot.Item.hazards.M.traffic.SS)\"$elem\"#if($foreach.hasNext),#end #end]"
                    - "}}}"
          -
            StatusCode: 400
            SelectionPattern: ".*routeID.*"
            ResponseTemplates:
              "application/json": "{\"status\": \"fail\", \"data\": {\"errorMessage\": \"Request requires a RouteID. Please specify a RouteID.\"}}"
          -
            StatusCode: 404
            SelectionPattern: ".*Not Found.*"
            ResponseTemplates:
              "application/json": "{\"status\": \"fail\", \"data\": {\"errorMessage\": \"The requested route could not be found\"}}"
          -
            StatusCode: 500
            SelectionPattern: ".*error.*"
            ResponseTemplates:
              "application/json": "{\"status\": \"error\", \"message\": \"Internal Server Error\"}"
      RestApiId: !Ref apigwRestApi
      MethodResponses:
        -
          StatusCode: 200
          ResponseModels:
            "application/json": "Empty"
        -
          StatusCode: 400
          ResponseModels:
            "application/json": "Empty"
        -
          StatusCode: 404
          ResponseModels:
            "application/json": "Empty"
        -
          StatusCode: 500
          ResponseModels:
            "application/json": "Empty"
  functionRouteDetailsGet:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        S3Bucket: !Ref codeBucketName
        S3Key: "get-route-details.py.zip"
      FunctionName:
        Fn::Join:
          - ''
          - - "function-get-route-details-"
            - !Ref stage
      Handler: "get-route-details.lambda_handler"
      Role: !GetAtt lambdaDdbRoRole.Arn
      Runtime: "python2.7"
      Environment:
        Variables:
          "TABLE":  !Ref ddbRoutesTableName
  functionRouteDetailsGetPermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: 'lambda:invokeFunction'
      FunctionName: !Ref functionRouteDetailsGet
      Principal:  apigateway.amazonaws.com
      SourceArn: !Sub arn:${AWS::Partition}:execute-api:${AWS::Region}:${AWS::AccountId}:${apigwRestApi}/*



